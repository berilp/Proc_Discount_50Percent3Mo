//notes 
	Copyright (c) 2025 by Yardi Systems, Inc.
	Name
		sp_PSC_50Per3MoDiscount.pkg
	Description
		Procedure to insert a prorated charge after 50 percent for 3 months discount ends and billing is switched from ANN to FOM
	Notes
		Package is for SQL Server and client specific. 
	Client 
    100070122
    Canadian Mini Warehouse Properties Company
		
	Created
		08/21/2025 by Beril Pehlivan  - Case#16959881 
		exec sp_PSC_50Per3MoDiscount @TenantID;
	
	Modified
		09/04/2025 by Harshvardhan Patil
		As per requirements mentioned under case#16959881 and internal discussion.
		Changes made in sections for STEP 1, 2, 3
//end notes 


//sql 
IF EXISTS(SELECT 1
          FROM   sysobjects
          WHERE  NAME = 'sp_Modified_psc_50per3modiscount')
  DROP PROCEDURE sp_Modified_psc_50per3modiscount

go

CREATE PROCEDURE sp_Modified_psc_50per3modiscount @TenantID NUMERIC,
													@UnitID   NUMERIC
AS
  BEGIN
      SET nocount ON;

      /*DECLARE @NewHMY NUMERIC;*/
      DECLARE @CurrentDate DATE;
      DECLARE @EndofCurrentMonth DATE;
      DECLARE @DaysRemaining INT;
      DECLARE @DaysInCurrentMonth INT;

	  /*
      SELECT @NewHMY = Isnull(Max(hmy), 0) + 1
      FROM   trans
      WHERE  itype = 7;
	  */

      /*Current date should be the month the discount ends */
      SELECT @CurrentDate = CONVERT(DATE, Getdate());
      SELECT @DaysRemaining = Datediff(day, DATEADD(day, 1, @CurrentDate), Eomonth(@CurrentDate));
      SELECT @DaysInCurrentMonth = Day(Eomonth(@CurrentDate));
      SELECT @EndofCurrentMonth = Eomonth(@CurrentDate);
	  
	  
/*-------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/* Step 1 - End the existing Rent Charge on the same date as the Discount ends */

      UPDATE cr
      SET    cr.dtto = crd.dtto, cr.bLocked = crd.bLocked
      FROM   camrule cr
             INNER JOIN tenant t
                     ON t.hmyperson = cr.htenant
             INNER JOIN camrule crd
                     ON crd.htenant = cr.htenant
                        AND cr.dtfrom = crd.dtfrom
                        AND cr.hunit = crd.hunit
      WHERE  cr.hchargecode = 10
             AND crd.hchargecode = 11
             AND crd.notes = '3 Mths. @ 50% Off'
             /* Current date should be the month the discount ends */
             AND crd.dtto >= Dateadd(day, 1, @CurrentDate)
             AND crd.dtto < Dateadd(day, 2, @CurrentDate)
             AND cr.htenant = @TenantID;

		
      UPDATE cs
      SET    cs.dtto = csd.dtto, cs.bLocked = csd.bLocked
      FROM   tenant t
			 INNER JOIN commamendments cm
					 ON cm.htenant = t.hmyperson
			 INNER JOIN commschedule cs
					 ON cs.hAmendment = cm.hmy
					    AND cs.hTenant = t.hMyperson
						AND cs.hchargecode = 10
             INNER JOIN commschedule csd
                     ON csd.htenant = cs.htenant
                        AND csd.dtfrom = cs.dtfrom
						AND csd.hAmendment = cm.hmy
						AND csd.hchargecode = 11
             INNER JOIN camrule crd
                     ON crd.hschedule = csd.hmy
					    AND crd.hTenant = t.hMYperson
      WHERE  crd.notes = '3 Mths. @ 50% Off'
             AND csd.dtto >= Dateadd(day, 1, @CurrentDate)
             AND csd.dtto < Dateadd(day, 2, @CurrentDate)
             AND cs.htenant = @TenantID;

/*-------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*Step 2 - create a charge (lease + ledger) for rest of the month */

	  INSERT INTO commschedule
                  (htenant,
                   hamendment,
                   dtfrom,
                   dtto,
                   hchargecode,
                   hamendmentinactive,
                   itype,
				   cFixedOffset,
				   hEstimateCharge,
				   hMiscCharge,
				   hTrueUpCharge,
				   iAuditedReportDue,
				   iEOYMonth,
				   iFixedOffsetType,
				   iFrequencyCalculation,
				   iFrequencyReconciliation,
				   iFrequencyBreakPoint,
				   iSalesReportDueDays,
				   iFrequencySalesReport,
				   cBaseAmount,
				   dArea,
				   iCeilingType,
				   cCeilingAmount,
				   dAdminFeePercent,
				   bLocked,
				   hOriginal,
				   bModified,
				   bCumulative,
				   iCAPIncreaseBasis,
				   iCAPIncreaseOverYr,
				   dCAPIncreasePct,
				   dMin,
				   dMax,
				   iMonth,
				   cOffsetReduction,
				   bNaturalBreakpoint,
				   bEstate,
				   bExcludeRecoveryReconciliation,
				   hTaxChargecode,
				   dTaxRate,
				   iCapAppliesTo,
				   bDoNotCreateCharges,
				   cFloorAmount,
				   iFloorType,
				   iFloorAppliesTo,
				   iSalesEntryType,
				   iMonthBeginDay,
				   bIsSalesTaxAdmin,
				   bIsUnitRecovery,
				   dCalcRentStart,
				   iCalcRentStep,
				   dCalcRentIncrease,
				   iCalcIncreaseType,
				   bUseDailySales,
				   iRentInputMethod,
				   hBooking,
				   hParentGroup,
				   iPartialLeaseYear,
				   bHoldCredit,
				   iCapMinIncreaseType,
				   bLesserOfOffsetOROvg,
				   bRecovOvgOffset,
				   hIncreaseChargeCode,
				   bReconcile,
				   bUnitSales,
				   bBaseAmountCredit,
				   iFreeRentType,
				   iCalcRent,
				   bUseOccupancyDate,
				   dRecovOvgOffsetPercent,
				   bDoNotBlend,
				   iProration,
				   bAnchorDeduction,
				   bIsExcludeParentBaseYear,
				   bIsExcludeParentCap,
				   bIsFixedRecovery,
				   iSalesChargeDueDays,
				   hRate,
				   bMultiUnit,
				   hCMLChargesCalc
				   )
      SELECT cs.htenant,
                   cs.hamendment,
                   /* CONVERT(DATETIME, ( Dateadd(day, 1, @CurrentDate ) ), 101),*/
                         CONVERT(datetime, DATEADD(day, 1, crd.dtto), 101),
				   CONVERT(DATETIME, @EndofCurrentMonth, 101),
                   cs.hchargecode,
                   cs.hamendmentinactive,
                   cs.itype,
				   cs.cFixedOffset,
				   cs.hEstimateCharge,
				   cs.hMiscCharge,
				   cs.hTrueUpCharge,
				   cs.iAuditedReportDue,
				   cs.iEOYMonth,
				   cs.iFixedOffsetType,
				   cs.iFrequencyCalculation,
				   cs.iFrequencyReconciliation,
				   cs.iFrequencyBreakPoint,
				   cs.iSalesReportDueDays,
				   cs.iFrequencySalesReport,
				   cs.cBaseAmount,
				   cs.dArea,
				   cs.iCeilingType,
				   cs.cCeilingAmount,
				   cs.dAdminFeePercent,
				   cs.bLocked,
				   cs.hOriginal,
				   cs.bModified,
				   cs.bCumulative,
				   cs.iCAPIncreaseBasis,
				   cs.iCAPIncreaseOverYr,
				   cs.dCAPIncreasePct,
				   cs.dMin,
				   cs.dMax,
				   cs.iMonth,
				   cs.cOffsetReduction,
				   cs.bNaturalBreakpoint,
				   cs.bEstate,
				   cs.bExcludeRecoveryReconciliation,
				   cs.hTaxChargecode,
				   cs.dTaxRate,
				   cs.iCapAppliesTo,
				   cs.bDoNotCreateCharges,
				   cs.cFloorAmount,
				   cs.iFloorType,
				   cs.iFloorAppliesTo,
				   cs.iSalesEntryType,
				   cs.iMonthBeginDay,
				   cs.bIsSalesTaxAdmin,
				   cs.bIsUnitRecovery,
				   cs.dCalcRentStart,
				   cs.iCalcRentStep,
				   cs.dCalcRentIncrease,
				   cs.iCalcIncreaseType,
				   cs.bUseDailySales,
				   cs.iRentInputMethod,
				   cs.hBooking,
				   cs.hParentGroup,
				   cs.iPartialLeaseYear,
				   cs.bHoldCredit,
				   cs.iCapMinIncreaseType,
				   cs.bLesserOfOffsetOROvg,
				   cs.bRecovOvgOffset,
				   cs.hIncreaseChargeCode,
				   cs.bReconcile,
				   cs.bUnitSales,
				   cs.bBaseAmountCredit,
				   cs.iFreeRentType,
				   cs.iCalcRent,
				   cs.bUseOccupancyDate,
				   cs.dRecovOvgOffsetPercent,
				   cs.bDoNotBlend,
				   cs.iProration,
				   cs.bAnchorDeduction,
				   cs.bIsExcludeParentBaseYear,
				   cs.bIsExcludeParentCap,
				   cs.bIsFixedRecovery,
				   cs.iSalesChargeDueDays,
				   cs.hRate,
				   cs.bMultiUnit,
				   cs.hCMLChargesCalc
      FROM   tenant t
			 INNER JOIN commamendments cm
					 ON cm.htenant = t.hmyperson
			 INNER JOIN commschedule cs
					 ON cs.hAmendment = cm.hmy
					    AND cs.hTenant = t.hMyperson
						AND cs.hchargecode = 10
             INNER JOIN commschedule csd
                     ON csd.htenant = cs.htenant
                        AND csd.dtfrom = cs.dtfrom
						AND csd.hAmendment = cm.hmy
						AND csd.hchargecode = 11
             INNER JOIN camrule crd
                     ON crd.hschedule = csd.hmy
					    AND crd.hTenant = t.hMYperson
      WHERE  crd.notes = '3 Mths. @ 50% Off'
             AND csd.dtto >= Dateadd(day, 1, @CurrentDate)
             AND csd.dtto < Dateadd(day, 2, @CurrentDate)
			 AND EOMONTH(csd.dtto) <> csd.dtto
             /* old rent charge schedule should be updated to end same as the discount charge's end-date now */
             AND cs.dtto >= Dateadd(day, 1, @CurrentDate)
             AND cs.dtto < Dateadd(day, 2, @CurrentDate)
             AND cs.htenant = @TenantID;


      INSERT INTO camrule
                  (hChargeCode,
				   hTenant,
				   dtFrom,
				   dtTo,
				   iEstimateType,
				   dEstimated,
				   iMinType,
				   iMaxType,
				   iType,
				   dTaxRate,
				   BaseRule,
				   GroupBP,
				   Cumulative,
				   Jan,
				   Feb,
				   Mar,
				   Apr,
				   May,
				   Jun,
				   Jul,
				   Aug,
				   Sep,
				   Oct,
				   Nov,
				   Dec,
				   Interest, 
				   LateFee,
				   bAch,
				   iMaxPerMo,
				   iCtPerMo,
				   bHold,
				   iAmountPeriod,
				   hUnit,
				   iBillDay,
				   hTranType,
				   iInvIsDue,
				   iDueDay,
				   iDueDayAfterMethod,
				   hLeaseCurrency,
				   hCamCodePtr,
				   dLFFactor,
				   iTaxPointDay,
				   bPaymentSchedule,
				   bVatIsNotNetCurrency,
				   bCheckAnnually,
				   iLICorrection,
				   dArea,
				   dPricePerArea,
				   hCurExchRateType,
				   bRoundToWholeNumbers,
				   dLFAdditionalFee,
				   hAmendment,
				   dMonthlyAmount,
				   dtLastBilled,
				   iScheduleType,
				   hSchedule,
				   bLocked,
				   bLastDayOfperiod,
				   bRevisedBilling,
				   isqftcol,
				   bcc,
				   iNextIncreaseDue,
				   hForeignDb,
				   iCapMinIncreaseType)
      SELECT cr.hChargeCode,
			 cr.hTenant,
			 /* CONVERT(DATETIME, ( Dateadd(day, 1, @CurrentDate ) ), 101),*/
             CONVERT(datetime, DATEADD(day, 1, crd.dtto), 101),
             CONVERT(DATETIME, @EndofCurrentMonth, 101),
			 cr.IESTIMATETYPE,
			 (cr.DESTIMATED/@DaysInCurrentMonth)*@DaysRemaining,
			 cr.iMinType,
			 cr.iMaxType,
			 cr.iType,
			 cr.dTaxRate,
			 cr.BaseRule,
			 cr.GroupBP,
			 cr.Cumulative,
			 cr.Jan,
			 cr.Feb,
			 cr.Mar,
			 cr.Apr,
			 cr.May,
			 cr.Jun,
			 cr.Jul,
			 cr.Aug,
			 cr.Sep,
			 cr.Oct,
			 cr.Nov,
			 cr.Dec,
			 cr.Interest,
			 cr.LateFee,
			 cr.bAch,
			 cr.iMaxPerMO,
			 cr.iCTPerMO,
			 cr.bHold,
			 cr.iAmountPeriod,
			 cr.hUnit,
			 1,
			 cr.hTranType,
			 cr.iInvIsDue,
			 cr.iDueDay,
			 cr.iDueDayAfterMethod,
			 cr.hLeaseCurrency,
			 cr.hCamCodePtr,
			 cr.dLFFactor,
			 cr.iTaxPointDay,
			 cr.bPaymentSchedule,
			 cr.bVatIsNotNetCurrency,
			 cr.bCheckAnnually,
			 cr.iLICorrection,
			 cr.dArea,
			 cr.dPricePerArea,
			 cr.hCurExchRateType,
			 cr.bRoundToWholeNumbers,
			 cr.dLFAdditionalFee,
			 cr.hAmendment,
			 cr.dMonthlyAmount,
			 NULL,
			 cr.iScheduleType,
			 cs.hMy,
			 cr.bLocked,
			 cr.bLastDayOfperiod,
			 cr.bRevisedBilling,
			 cr.isqftcol,
			 cr.bcc,
			 cr.iNextIncreaseDue,
			 cr.hForeignDb,
			 cr.iCapMinIncreaseType
      FROM   tenant t
			 INNER JOIN commamendments cm
					 ON cm.htenant = t.hmyperson
             INNER JOIN camrule cr
                     ON t.hmyperson = cr.htenant
						AND cr.hAmendment = cm.hMy
						AND cr.hChargeCode = 10
             INNER JOIN camrule crd
                     ON crd.htenant = cr.htenant
                        AND cr.dtfrom = crd.dtfrom
                        AND cr.hunit = crd.hunit
						AND crd.hChargeCode = 11
			 INNER JOIN CommSchedule cs
					 ON cs.hTenant = t.hMyperson
						AND cs.hAmendment = cr.hAmendment
						AND cs.hChargeCode = cr.hChargeCode
						AND cs.dtFrom = CONVERT(DATETIME, ( Dateadd(day, 1, cr.dtto )), 101)
						AND cs.dtto = CONVERT(DATETIME, @EndofCurrentMonth, 101)
						AND cs.hmy IN (Select MAX(cs2.hmy) from commschedule cs2 where cs2.htenant = t.hmyperson AND cs2.hChargecode = 10)
      WHERE  crd.notes = '3 Mths. @ 50% Off'
             AND crd.dtto >= Dateadd(day, 1, @CurrentDate)
             AND crd.dtto < Dateadd(day, 2, @CurrentDate)
             /* old Rent estimate should be updated to end same as the discount now after step 1*/
             AND cr.dtto >= Dateadd(day, 1, @CurrentDate)
             AND cr.dtto < Dateadd(day, 2, @CurrentDate)
			 AND EOMONTH(crd.dtto) <> crd.dtto
             AND cr.htenant = @TenantID;

		 
/**/
	   DECLARE @hChart            NUMERIC,
		      @hCashAcct         NUMERIC,
			  @hAccrualAcct      NUMERIC,
			  @ARPostMonth       DATETIME,
			  @l_hChargeBackAcct NUMERIC,
			  @BatchChargeHmy    NUMERIC,
			  @ChargeHmy       NUMERIC

/* 'Get chart used by property of the respective tenant' */
	  SELECT @hChart = hchart
					FROM   lockout
					WHERE  hprop = (SELECT hproperty
					                FROM   tenant
					                WHERE  hmyperson = @TenantID)  

/* "System's AR account" */
	  SELECT @hAccrualAcct = hreceivable
					FROM   param
					WHERE  hchart = @hChart
					
/* "System's cash account" */
	  SELECT @hCashAcct = hcash 
					FROM   param
					WHERE  hchart = @hChart 
					
/* 'Operating month of the property of the respective tenant' */
	  SELECT @ARPostMonth = dtmmyy1
					FROM   lockout
					WHERE  hprop = (SELECT hproperty
					                FROM   tenant
					                WHERE  hmyperson = @TenantID)
	  SELECT @l_hChargeBackAcct = (SELECT prop.hvalue
                             FROM   tenant t
                                    INNER JOIN property p
                                            ON p.hmy = t.hproperty
                                    INNER JOIN propoptions prop
                                            ON prop.hprop = p.hmy
                                               AND
                                    prop.stype = 'hPayablecashAcct'
                             WHERE  t.hmyperson = @TenantID) 
		

INSERT INTO s_batchcharge VALUES  (1)
/* 'Store hmy of new chg batch record' */
SELECT @BatchChargeHmy = Scope_identity()

INSERT INTO s_charge VALUES  (1)
/* 'Store hmy of new chg record' */
SELECT @ChargeHmy = Scope_identity()

/*Creating Charge batch*/
	  INSERT INTO trans  
                  (hmy,  
                   itype,  
                   hperson,  
                   uref,  
                   hunit,  
                   stotalamount,  
                   samountpaid,  
                   bopen,  
                   upostdate,  
                   sdateoccurred,  
                   sotherdate1,  
                   sotherdate2,  
                   itype1,  
                   itype2,  
                   sdatecreated,  
                   husercreatedby,  
                   smodulecreatedby,  
                   snotes)  
      select @BatchChargeHmy,  
             16,  
             0,  
             'New Rent Lease Charge',  
             0,  
             0,  
             cr.DESTIMATED,  
             -1,  
             NULL,  
             NULL,  
             NULL,  
             NULL,  
             0,  
             1,  
             @CurrentDate,  
             0,  
             'PM',  
             'Rental Income Proration'
	  FROM tenant t 
			INNER JOIN camrule cr ON cr.htenant = t.hmyperson
								AND isnull(cr.dtto, getdate()) > getdate() AND cr.dtfrom > getdate()
								AND cr.hchargecode = 10 
	  WHERE t.hMyperson = @TenantID
			AND cr.dtto = CONVERT(DATETIME, Eomonth(@CurrentDate), 101)
	  
/*Creating Charge*/
      INSERT INTO trans  
                 (hmy,  
                  uref,  
                  hoffsetacct,  
                  hparent1,  
                  hparent2,  
                  itype,  
                  itype2,  
                  hperson,  
                  hunit,  
                  stotalamount,  
                  samountpaid,  
                  bopen,  
                  upostdate,  
                  sdateoccurred,  
                  sotherdate1,  
                  suserdefined1,  
                  suserdefined2,  
                  hretentionacct,  
                  hjob,  
                  itype1,  
                  sdatecreated,  
                  husercreatedby,  
                  smodulecreatedby,  
                  snotes,  
                  holdpayment,  
                  consolidatecheck,  
                  hprop,  
                  haccrualacct,  
                  hcateg,  
                  sinvdraw,  
                  hdrawctl,  
                  stranamount,  
                  dtstamp,  
                  dexchrate,  
                  isubtype,  
                  h3party,  
                  hvat,  
                  svatamount,  
                  hvattrantype,  
                  hbasecurrency,  
                  hparent3)  
      select      @ChargeHmy, 
				  @ChargeHmy - 700000000,  
                  @l_hChargeBackAcct,  
                  0,  
                  @BatchChargeHmy,  
                  15,  
                  0,  
                  @TenantID,  
                  @UnitID,  
                  cr.dEstimated,    
                  0,  
                  -1,  
                  @ARPostMonth,  
                  CONVERT(VARCHAR, Getdate(), 101),  
                  CONVERT(VARCHAR, Getdate(), 101),  
                  '',  
                  ':Misc Post Rent Tran',  
                  10,  
                  0,  
                  2,  
                  @CurrentDate,  
                  0,  
                  'PM',  
                  ':Prorated New Rent ('  
                  + CONVERT(VARCHAR, Month(@ARPostMonth)) +  
                  '/'  
                  + CONVERT(VARCHAR, Year(@ARPostMonth)) +  
                  ')',  
                  0,    
                  0,  
                  (select hproperty from Tenant where hmyperson = @TenantID),  
                  @hAccrualAcct,  
                  0,  
                  NULL,  
                  NULL,  
                  cr.dEstimated,     
                  CONVERT(VARCHAR(20), Getdate(), 101) + ' '  
                  + CONVERT(VARCHAR(20), Getdate(), 108) +  
                  ' '  
                  + RIGHT(CONVERT(VARCHAR(30), Getdate(), 109  
                  ),  
                  2),  
                  0.00,  
                  0,  
                  0,  
                  0,  
                  0.00,  
                  0,  
                  0,  
                  0   
	  FROM tenant t 
			INNER JOIN camrule cr ON cr.htenant = t.hmyperson
								AND isnull(cr.dtto, getdate()) > getdate() AND cr.dtfrom > getdate()
								AND cr.hchargecode = 10 
	  WHERE t.hMyperson = @TenantID
			AND cr.dtto = CONVERT(DATETIME, Eomonth(@CurrentDate), 101)
			
	/* EXEC Ul_post_batch @BatchChargeHmy, 1 */

insert into CAMCHARG
select cr.HCHARGECODE,cr.HTENANT,tr.UPOSTDATE,null,null,null,null,tr.STOTALAMOUNT,-1,tr.HMY,tr.SNOTES,null,null,null,null,null,null,null,null,null,@DaysRemaining,
NULL, NULL,	NULL, NULL,	NULL, NULL,cr.HMY,null,-3,null,cr.hUnit,null,tr.SOTHERDATE2,tr.SOTHERDATE3,tr.sTranAmount,tr.dExchRate,null,null,
NULL, NULL,	NULL,	NULL,tr.sVatAmount,tr.sVatAmount2, 0, NULL,	NULL, NULL,	NULL, NULL, NULL, NULL, '', '', '', '', '', '', '', '', '', '', '', ''
from camrule cr
	inner join trans tr on tr.HRETENTIONACCT = cr.HCHARGECODE and cr.hChargeCode = 10 
where NOT exists (select 1 from CAMCHARG where HCAMRULE = cr.HMY and HCHARGECODE=cr.HCHARGECODE) 
AND cr.htenant = @TenantID
AND cr.dtFrom > @CurrentDate AND cr.dtto = CONVERT(DATE, EOMONTH(@CurrentDate), 101)
AND tr.hmy = @ChargeHmy


/*-------------------------------------------------------------------------------------------------------------------------------------------------------------------*/	 
/*Step 3 - create a charge starting on first of the next month*/
      INSERT INTO commschedule
                  (htenant,
                   hamendment,
                   dtfrom,
                   dtto,
                   hchargecode,
                   hamendmentinactive,
                   itype,
				   cFixedOffset,
				   hEstimateCharge,
				   hMiscCharge,
				   hTrueUpCharge,
				   iAuditedReportDue,
				   iEOYMonth,
				   iFixedOffsetType,
				   iFrequencyCalculation,
				   iFrequencyReconciliation,
				   iFrequencyBreakPoint,
				   iSalesReportDueDays,
				   iFrequencySalesReport,
				   cBaseAmount,
				   dArea,
				   iCeilingType,
				   cCeilingAmount,
				   dAdminFeePercent,
				   bLocked,
				   hOriginal,
				   bModified,
				   bCumulative,
				   iCAPIncreaseBasis,
				   iCAPIncreaseOverYr,
				   dCAPIncreasePct,
				   dMin,
				   dMax,
				   iMonth,
				   cOffsetReduction,
				   bNaturalBreakpoint,
				   bEstate,
				   bExcludeRecoveryReconciliation,
				   hTaxChargecode,
				   dTaxRate,
				   iCapAppliesTo,
				   bDoNotCreateCharges,
				   cFloorAmount,
				   iFloorType,
				   iFloorAppliesTo,
				   iSalesEntryType,
				   iMonthBeginDay,
				   bIsSalesTaxAdmin,
				   bIsUnitRecovery,
				   dCalcRentStart,
				   iCalcRentStep,
				   dCalcRentIncrease,
				   iCalcIncreaseType,
				   bUseDailySales,
				   iRentInputMethod,
				   hBooking,
				   hParentGroup,
				   iPartialLeaseYear,
				   bHoldCredit,
				   iCapMinIncreaseType,
				   bLesserOfOffsetOROvg,
				   bRecovOvgOffset,
				   hIncreaseChargeCode,
				   bReconcile,
				   bUnitSales,
				   bBaseAmountCredit,
				   iFreeRentType,
				   iCalcRent,
				   bUseOccupancyDate,
				   dRecovOvgOffsetPercent,
				   bDoNotBlend,
				   iProration,
				   bAnchorDeduction,
				   bIsExcludeParentBaseYear,
				   bIsExcludeParentCap,
				   bIsFixedRecovery,
				   iSalesChargeDueDays,
				   hRate,
				   bMultiUnit,
				   hCMLChargesCalc
				   )
      SELECT cs.htenant,
                   cs.hamendment,
                   /* CONVERT(DATETIME, ( Dateadd(day, 1, @CurrentDate ) ), 101),*/
                   DATEADD(DAY, 1, EOMONTH(@CurrentDate)),
				   NULL,
                   cs.hchargecode,
                   cs.hamendmentinactive,
                   cs.itype,
				   cs.cFixedOffset,
				   cs.hEstimateCharge,
				   cs.hMiscCharge,
				   cs.hTrueUpCharge,
				   cs.iAuditedReportDue,
				   cs.iEOYMonth,
				   cs.iFixedOffsetType,
				   cs.iFrequencyCalculation,
				   cs.iFrequencyReconciliation,
				   cs.iFrequencyBreakPoint,
				   cs.iSalesReportDueDays,
				   cs.iFrequencySalesReport,
				   cs.cBaseAmount,
				   cs.dArea,
				   cs.iCeilingType,
				   cs.cCeilingAmount,
				   cs.dAdminFeePercent,
				   cs.bLocked,
				   cs.hOriginal,
				   cs.bModified,
				   cs.bCumulative,
				   cs.iCAPIncreaseBasis,
				   cs.iCAPIncreaseOverYr,
				   cs.dCAPIncreasePct,
				   cs.dMin,
				   cs.dMax,
				   cs.iMonth,
				   cs.cOffsetReduction,
				   cs.bNaturalBreakpoint,
				   cs.bEstate,
				   cs.bExcludeRecoveryReconciliation,
				   cs.hTaxChargecode,
				   cs.dTaxRate,
				   cs.iCapAppliesTo,
				   cs.bDoNotCreateCharges,
				   cs.cFloorAmount,
				   cs.iFloorType,
				   cs.iFloorAppliesTo,
				   cs.iSalesEntryType,
				   cs.iMonthBeginDay,
				   cs.bIsSalesTaxAdmin,
				   cs.bIsUnitRecovery,
				   cs.dCalcRentStart,
				   cs.iCalcRentStep,
				   cs.dCalcRentIncrease,
				   cs.iCalcIncreaseType,
				   cs.bUseDailySales,
				   cs.iRentInputMethod,
				   cs.hBooking,
				   cs.hParentGroup,
				   cs.iPartialLeaseYear,
				   cs.bHoldCredit,
				   cs.iCapMinIncreaseType,
				   cs.bLesserOfOffsetOROvg,
				   cs.bRecovOvgOffset,
				   cs.hIncreaseChargeCode,
				   cs.bReconcile,
				   cs.bUnitSales,
				   cs.bBaseAmountCredit,
				   cs.iFreeRentType,
				   cs.iCalcRent,
				   cs.bUseOccupancyDate,
				   cs.dRecovOvgOffsetPercent,
				   cs.bDoNotBlend,
				   cs.iProration,
				   cs.bAnchorDeduction,
				   cs.bIsExcludeParentBaseYear,
				   cs.bIsExcludeParentCap,
				   cs.bIsFixedRecovery,
				   cs.iSalesChargeDueDays,
				   cs.hRate,
				   cs.bMultiUnit,
				   cs.hCMLChargesCalc
      FROM   tenant t
			 INNER JOIN commamendments cm
					 ON cm.htenant = t.hmyperson
			 INNER JOIN commschedule cs
					 ON cs.hAmendment = cm.hmy
					    AND cs.hTenant = t.hMyperson
						AND cs.hchargecode = 10
      WHERE  cs.dtto >= Dateadd(day, 1, @CurrentDate)
             AND cs.dtto < Dateadd(day, 2, @CurrentDate)
             AND cs.htenant = @TenantID;


      INSERT INTO camrule
                  (hChargeCode,
				   hTenant,
				   dtFrom,
				   dtTo,
				   iEstimateType,
				   dEstimated,
				   iMinType,
				   iMaxType,
				   iType,
				   dTaxRate,
				   BaseRule,
				   GroupBP,
				   Cumulative,
				   Jan,
				   Feb,
				   Mar,
				   Apr,
				   May,
				   Jun,
				   Jul,
				   Aug,
				   Sep,
				   Oct,
				   Nov,
				   Dec,
				   Interest, 
				   LateFee,
				   bAch,
				   iMaxPerMo,
				   iCtPerMo,
				   bHold,
				   iAmountPeriod,
				   hUnit,
				   iBillDay,
				   hTranType,
				   iInvIsDue,
				   iDueDay,
				   iDueDayAfterMethod,
				   hLeaseCurrency,
				   hCamCodePtr,
				   dLFFactor,
				   iTaxPointDay,
				   bPaymentSchedule,
				   bVatIsNotNetCurrency,
				   bCheckAnnually,
				   iLICorrection,
				   dArea,
				   dPricePerArea,
				   hCurExchRateType,
				   bRoundToWholeNumbers,
				   dLFAdditionalFee,
				   hAmendment,
				   dMonthlyAmount,
				   dtLastBilled,
				   iScheduleType,
				   hSchedule,
				   bLocked,
				   bLastDayOfperiod,
				   bRevisedBilling,
				   isqftcol,
				   bcc,
				   iNextIncreaseDue,
				   hForeignDb,
				   iCapMinIncreaseType)
      SELECT cr.hChargeCode,
			 cr.hTenant,
			 /* CONVERT(DATETIME, ( Dateadd(day, 1, @CurrentDate ) ), 101),*/
             DATEADD(DAY, 1, EOMONTH(@CurrentDate)),
			 NULL,
			 cr.IESTIMATETYPE,
			 cr.DESTIMATED,
			 cr.iMinType,
			 cr.iMaxType,
			 cr.iType,
			 cr.dTaxRate,
			 cr.BaseRule,
			 cr.GroupBP,
			 cr.Cumulative,
			 cr.Jan,
			 cr.Feb,
			 cr.Mar,
			 cr.Apr,
			 cr.May,
			 cr.Jun,
			 cr.Jul,
			 cr.Aug,
			 cr.Sep,
			 cr.Oct,
			 cr.Nov,
			 cr.Dec,
			 cr.Interest,
			 cr.LateFee,
			 cr.bAch,
			 cr.iMaxPerMO,
			 cr.iCTPerMO,
			 cr.bHold,
			 cr.iAmountPeriod,
			 cr.hUnit,
			 1,
			 cr.hTranType,
			 cr.iInvIsDue,
			 cr.iDueDay,
			 cr.iDueDayAfterMethod,
			 cr.hLeaseCurrency,
			 cr.hCamCodePtr,
			 cr.dLFFactor,
			 cr.iTaxPointDay,
			 cr.bPaymentSchedule,
			 cr.bVatIsNotNetCurrency,
			 cr.bCheckAnnually,
			 cr.iLICorrection,
			 cr.dArea,
			 cr.dPricePerArea,
			 cr.hCurExchRateType,
			 cr.bRoundToWholeNumbers,
			 cr.dLFAdditionalFee,
			 cr.hAmendment,
			 cr.dMonthlyAmount,
			 NULL,
			 cr.iScheduleType,
			 cs.hMy,
			 cr.bLocked,
			 cr.bLastDayOfperiod,
			 cr.bRevisedBilling,
			 cr.isqftcol,
			 cr.bcc,
			 cr.iNextIncreaseDue,
			 cr.hForeignDb,
			 cr.iCapMinIncreaseType
	  FROM   tenant t
			 INNER JOIN commamendments cm
					 ON cm.htenant = t.hmyperson
             INNER JOIN camrule cr
                     ON t.hmyperson = cr.htenant
						AND cr.hAmendment = cm.hMy
						AND cr.hChargeCode = 10
			 INNER JOIN CommSchedule cs
					 ON cs.hTenant = t.hMyperson
						AND cs.hAmendment = cr.hAmendment
						AND cs.hChargeCode = cr.hChargeCode
						AND cs.dtFrom = CONVERT(DATETIME, ( Dateadd(day, 1, EOMONTH(@CurrentDate) )), 101)
						AND cs.dtto IS NULL
						AND cs.hmy IN (Select MAX(cs2.hmy) from commschedule cs2 where cs2.htenant = t.hmyperson AND cs2.hChargecode = 10)
      WHERE  cr.dtto >= Dateadd(day, 1, CONVERT(DATE, Getdate()))
             AND cr.dtto < Dateadd(day, 2, CONVERT(DATE, Getdate()))
             AND cr.htenant = @TenantID;

	END
//end sql 